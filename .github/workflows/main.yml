name: RDP

on:
workflow_dispatch:

jobs:
secure-rdp:
runs-on: windows-latest
timeout-minutes: 3600
steps:
  - name: Configure Core RDP Settings
    shell: pwsh
    run: |
      Write-Host "Enabling Remote Desktop and configuring firewall..."

      # Enable RDP
      Set-ItemProperty -Path "HKLM:\System\CurrentControlSet\Control\Terminal Server" -Name "fDenyTSConnections" -Value 0 -Force

      # Disable NLA (optional)
      Set-ItemProperty -Path "HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp" -Name "UserAuthentication" -Value 0 -Force
      Set-ItemProperty -Path "HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp" -Name "SecurityLayer" -Value 0 -Force

      # Configure Firewall
      netsh advfirewall firewall delete rule name="RDP-Tailscale" | Out-Null
      netsh advfirewall firewall add rule name="RDP-Tailscale" dir=in action=allow protocol=TCP localport=3389 | Out-Null

      # Restart RDP service
      Restart-Service -Name TermService -Force
      Write-Host "RDP enabled successfully."

  - name: Create RDP User with Secure Password
    shell: pwsh
    run: |
      Write-Host "Creating local user for RDP login..."

      Add-Type -AssemblyName System.Security
      $charSet = @{
          Upper   = [char[]](65..90)
          Lower   = [char[]](97..122)
          Number  = [char[]](48..57)
          Special = ([char[]](33..47) + [char[]](58..64) + [char[]](91..96) + [char[]](123..126))
      }

      $rawPassword = @()
      $rawPassword += $charSet.Upper | Get-Random -Count 4
      $rawPassword += $charSet.Lower | Get-Random -Count 4
      $rawPassword += $charSet.Number | Get-Random -Count 4
      $rawPassword += $charSet.Special | Get-Random -Count 4
      $password = -join ($rawPassword | Sort-Object { Get-Random })

      $securePass = ConvertTo-SecureString $password -AsPlainText -Force
      New-LocalUser -Name "RDP" -Password $securePass -AccountNeverExpires
      Add-LocalGroupMember -Group "Administrators" -Member "RDP"
      Add-LocalGroupMember -Group "Remote Desktop Users" -Member "RDP"

      echo "RDP_PASSWORD=$password" >> $env:GITHUB_ENV
      Write-Host "User 'RDP' created with password: $password"

  - name: Install Tailscale
    shell: pwsh
    run: |
      Write-Host "Installing Tailscale..."
      $tsUrl = "https://pkgs.tailscale.com/stable/tailscale-setup-1.82.0-amd64.msi"
      $installerPath = "$env:TEMP\tailscale.msi"
      Invoke-WebRequest -Uri $tsUrl -OutFile $installerPath
      Start-Process msiexec.exe -ArgumentList "/i `"$installerPath`" /quiet /norestart" -Wait
      Remove-Item $installerPath -Force
      Write-Host "Tailscale installed successfully."

  - name: Connect to Tailscale Network
    shell: pwsh
    run: |
      Write-Host "Bringing up Tailscale connection..."
      & "$env:ProgramFiles\Tailscale\tailscale.exe" up --authkey=${{ secrets.TAILSCALE_AUTH_KEY }} --hostname=gh-runner-$env:GITHUB_RUN_ID

      $retries = 0
      do {
          $tsIP = & "$env:ProgramFiles\Tailscale\tailscale.exe" ip -4
          if (-not $tsIP) {
              Start-Sleep -Seconds 5
              $retries++
          }
      } while (-not $tsIP -and $retries -lt 10)

      if (-not $tsIP) {
          Write-Error "Failed to obtain Tailscale IP."
          exit 1
      }

      echo "TAILSCALE_IP=$tsIP" >> $env:GITHUB_ENV
      Write-Host "Tailscale connected at $tsIP"

  - name: Display Connection Info
    shell: pwsh
    run: |
      Write-Host ""
      Write-Host "=========================="
      Write-Host "âœ… RDP Server Ready"
      Write-Host "IP (Tailscale): $env:TAILSCALE_IP"
      Write-Host "Username: RDP"
      Write-Host "Password: $env:RDP_PASSWORD"
      Write-Host "=========================="
      Write-Host ""
      while ($true) {
          Write-Host "[$(Get-Date)] RDP Active... Press Ctrl+C to terminate workflow."
          Start-Sleep -Seconds 300
      }
